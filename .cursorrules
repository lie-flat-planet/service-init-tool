# Go 服务初始化工具 Cursor 规则

## 项目概述

这是一个 Go 服务初始化工具，提供以下组件：

- 基于 Gin 框架的 HTTP 服务器
- Redis 客户端集成
- 基于 GORM 的 MySQL 数据库
- Prometheus 指标监控
- Elasticsearch 客户端
- 配置管理
- 基于 Logrus 的日志系统

## 代码风格和约定

### Go 代码风格

- 遵循 Go 官方格式化标准 (gofmt)
- 使用有意义的变量和函数名称
- 优先使用组合而非继承
- 使用接口进行依赖注入
- 保持函数小而专注
- 使用显式错误返回进行适当的错误处理
- 遵循 Go 命名约定 (变量使用 camelCase，导出项使用 PascalCase)

### 包结构

- 使用清晰、描述性的包名
- 保持包专注于单一职责
- 使用 internal 包存放私有代码
- 遵循标准 Go 项目布局

### 错误处理

- 始终显式检查和处理错误
- 在适当时使用自定义错误类型
- 提供有意义的错误消息
- 使用 errors.Wrap 保持上下文

### 配置管理

- 使用环境变量进行配置
- 支持多种配置格式 (YAML, JSON)
- 在启动时验证配置
- 使用合理的默认值

### 日志记录

- 使用 Logrus 进行结构化日志记录
- 在日志消息中包含相关上下文
- 使用适当的日志级别
- 避免记录敏感信息

### 测试

- 为所有导出的函数编写单元测试
- 在适当时使用表驱动测试
- 模拟外部依赖
- 追求高测试覆盖率

### 文档

- 为导出的函数和类型添加注释
- 使用清晰、简洁的文档
- 在有用时包含使用示例
- 遵循 Go 文档约定

## 架构指南

### 组件设计

- 每个组件应该是自包含的
- 使用依赖注入处理外部依赖
- 为组件交互提供清晰的接口
- 支持优雅关闭

### 数据库操作

- 使用 GORM 进行数据库操作
- 实现适当的连接池
- 适当处理数据库迁移
- 对多步操作使用事务

### HTTP 服务器

- 使用 Gin 进行 HTTP 路由和中间件
- 实现适当的请求验证
- 使用中间件处理横切关注点
- 返回适当的 HTTP 状态码

### 指标和监控

- 使用 Prometheus 收集指标
- 定义有意义的指标
- 包含健康检查端点
- 监控应用程序性能

## 安全考虑

- 验证所有输入数据
- 对数据库操作使用参数化查询
- 实现适当的身份验证和授权
- 避免记录敏感信息
- 在生产环境中使用 HTTPS

## 性能指南

- 为数据库和 Redis 使用连接池
- 实现适当的缓存策略
- 优化数据库查询
- 适当使用 goroutines 进行并发操作
- 监控内存使用和垃圾回收

## 开发工作流

- 使用语义化版本控制
- 编写清晰的提交消息
- 在合并前审查代码
- 在提交前运行测试
- 使用代码检查工具 (golangci-lint)

## 依赖管理

- 保持依赖项最新
- 使用 go modules 进行依赖管理
- 最小化外部依赖
- 记录为什么需要特定依赖项

## 文件组织

- 在包中分组相关功能
- 使用清晰的文件命名约定
- 保持文件专注于单一职责
- 使用一致的导入排序
